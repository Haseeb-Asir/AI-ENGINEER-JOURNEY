# 🌱 Day 1 – My AI Journey Begins

## 📚 What I Learned Today

Today marks the beginning of my limitless journey into Python programming and Artificial Intelligence. Here’s a summary of foundational concepts I covered:

---

### 🔹 Python Basics & Background

- **Invented By**: Guido van Rossum  
- **First Released**: 1990 (conceptualized in the late 1980s)
- **Philosophy**: Simple, readable, and beginner-friendly syntax.

---

### 🔹 Key Features of Python

- 🧠 **High-Level Language** – Easy to understand and closer to human thinking  
- 💸 **Free and Open-Source** – Accessible to everyone  
- 🌐 **Portable** – Write once, run anywhere  
- 🔁 **Versatile** – Used in:
  - Web Development
  - Game Development
  - AI and Machine Learning
  - Data Science
  - Automation & Scripting

---

### 🔹 Python Typing System

- ✅ **Dynamically Typed** (implicit typing):  
  Python decides the data type at runtime.
  ```python
  x = 5  # Python automatically understands this is an int

###Syntax Essentials
#Keywords: Reserved words in Python (like if, else, return, etc.)

#Punctuators: Symbols used for structure (:, =, (), {}, etc.)

###🧠 Problem Solving (Codewars)
#I also practiced some bite-sized challenges to apply the concepts I learned.

#📌 Codewars Challenges Solved Today:
Double Values in a List (without loops)

Remove Exclamation Marks from End of String

Basic Mathematical Operations

Convert Number to Binary

Return the Day from a Number (1–7)

#💡 Solutions for each challenge are saved in the solutions/day1_codewars.py file.

### Interview questions related to this are :

1.Largest Palindrome in a String: This involves substring searching, which requires understanding of string manipulation and efficient algorithms, often involving dynamic programming.

2.Sliding Window Maximum: This problem requires knowledge of windowing techniques and optimization using data structures like deques, which can be complex to understand without first learning about arrays and lists in Python.

3.Finding Missing Number in a Range: While this problem seems simple, it's often solved using bit manipulation or mathematical formulas, which require a good understanding of numbers and mathematical logic.

4.Longest Substring Without Repeating Characters: This is a classic string problem and often requires a sliding window approach and hash maps, which you might not have learned yet.

5.Design a Simple Rate Limiter: This requires a deeper understanding of time complexities, data structures like queues, and APIs, which are more advanced concepts.

6.Find All Anagrams in a String: This involves string manipulations and hash maps, which may be challenging at this early stage.

7.Data Consistency Check Between Two Data Sources: This problem is more about working with data structures and comparison, which is good for when you're familiar with more advanced topics.

8.Merge k Sorted Lists: This involves working with linked lists, a concept you may not have explored yet. It also introduces advanced algorithms like the merge sort.

9.Longest Increasing Subsequence: This problem is often solved using dynamic programming, which requires a good understanding of arrays and recursion.

10.Find Missing Element in a Sequence: This is a bit more approachable but still requires advanced thinking for optimization, and might be more fitting later.

SOLUTIONS:
# Sum Mixed Array
def sum_mix(arr):
    return sum(map(int, arr))

# Example usage:
# sum_mix([1, '2', 3, '4', 5])  # Output: 15
# sum_mix([1, 2, 3])            # Output: 6

# Exclamation Marks Series #2: Remove All Exclamation Marks from the End of Sentence
def remove(st):
    return st.rstrip('!')

# Example usage:
# remove("Hello!")  # Output: "Hello"
# remove("Hello")   # Output: "Hello"

# List Filtering: Filter out non-integer elements from the list
def filter_list(l):
    return [i for i in l if type(i) == int]

# Example usage:
# filter_list([1, '2', 3, 'a', 4])  # Output: [1, 3, 4]


# You Can't Code Under Pressure #1: Double the integer
def double_integer(i):
    return i * 2

# Example usage:
# double_integer(3)  # Output: 6



# Basic Mathematical Operations
def basic_op(operator, value1, value2):
    if operator == '+':
        return value1 + value2
    elif operator == '-':
        return value1 - value2
    elif operator == '*':
        return value1 * value2
    elif operator == '/':
        return value1 / value2

# Example usage:
# basic_op('+', 3, 5)   # Output: 8
# basic_op('-', 10, 4)  # Output: 6



# Beginner - Lost Without a Map: Multiply each element by 2
def maps(a):
    return [x * 2 for x in a]

# Example usage:
# maps([1, 2, 3])  # Output: [2, 4, 6]


# Convert a Number to a String!
def number_to_string(num):
    return str(num)

# Example usage:
# number_to_string(5)  # Output: "5"



# Is He Gonna Survive? (Check if bullets are enough to defeat dragons)
def hero(bullets, dragons):
    return bullets >= 2 * dragons

# Example usage:
# hero(10, 5)  # Output: True
# hero(5, 3)   # Output: False


# DNA to RNA Conversion: Replace 'T' with 'U'
def dna_to_rna(dna):
    return dna.replace("T", "U")

# Example usage:
# dna_to_rna("ATTGC")  # Output: "AUUGC"


# Grasshopper - Basic Function Fixer: Add 5 to a number
def add_five(num):
    return num + 5

# Example usage:
# add_five(3)  # Output: 8



# Remove First and Last Character: Remove first and last character of a string
def remove_char(s):
    return s[1:-1]

# Example usage:
# remove_char("hello")  # Output: "ell"


# Convert a Boolean to a String
def boolean_to_string(b):
    return str(b)

# Example usage:
# boolean_to_string(True)  # Output: "True"
# boolean_to_string(False) # Output: "False"


# Convert a String to a Number!
def string_to_number(s):
    return int(s)

# Example usage:
# string_to_number("123")  # Output: 123





